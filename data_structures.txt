Linked Lists:
nodes in order, can be singly, doubly, or circularly linked.


Binary Trees:
heirarchichal data structure in which each node has at most two children.


Stacks:
LIFO.  like mtg.
Operations: push, pop, peek, empty?


Queues:
FIFO.
Operations: enqueue, dequeue, first, last


Heaps:
Binary Tree with some extras:
1 - it is complete (all levels are full, except the bottom most which must have all data as left as possible)
2 - each node must be smaller than its children (for a min heap) or greater than (for a max heap)


Hash Set:
- precursor to hash map
- a resizing int set, with arrays as buckets, but every input gets hashed before entering the set (this lets you use all data types)


Hash Map:
- combines hash set and linked list
- hash set but buckets are linked lists

Steps to use a hash map:
- hash the item to add (the hashed value will be the key in the linked list)
- mod by the # of buckets to find which bucket the item belongs in
- to set, add the key (hashed value) and value (actual value) to the appropriate bucket (linked list)
- to get, check whether the right linked list contains the key you're looking for
- to delete, remove the key from the list

Why use a hash map?
- it has an average of O(1) time for search, get, and set


LRU Cache:
a cache that boots off the least-recently-used item(s)

- built with a combo of a hash map and a linked list (so 2 total linked lists?)
- cached items are stored in a linked list
- when a new item is found (or a cached item is reused), the item is moved to the end of the list
- when the cache is full, the oldest items (at the beginning of the list) are removed


The problem: Linked lists have O(n) lookup time
